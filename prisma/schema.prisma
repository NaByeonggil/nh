// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phone         String?
  role          Role      @default(USER)
  isExpert      Boolean   @default(false)
  
  // 권한 관리 필드
  canManageContent  Boolean   @default(false) // 컨텐츠 관리 권한
  canManageInquiry  Boolean   @default(false) // 문의 관리 권한
  expertField       String?   // 전문 분야 (약사, 영양사, 간호사 등)
  expertLicense     String?   // 자격증 번호
  expertVerified    Boolean   @default(false) // 전문가 인증 여부
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  inquiries Inquiry[]
  comments  Comment[]
  orders    Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Inquiry {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  authorName  String?
  authorPhone String?
  authorEmail String?
  password    String?
  attachments String?  @db.Text // JSON string of file paths
  isPrivate   Boolean  @default(false)
  viewCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author   User?     @relation(fields: [authorId], references: [id])
  authorId String?
  comments Comment[]

  @@index([createdAt])
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inquiry   Inquiry @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  inquiryId String
  author    User    @relation(fields: [authorId], references: [id])
  authorId  String

  @@index([inquiryId])
}

model Content {
  id          String      @id @default(cuid())
  title       String
  content     String      @db.Text
  excerpt     String?
  thumbnail   String?
  category    ContentType
  published   Boolean     @default(false)
  viewCount   Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([category, published])
  @@index([createdAt])
}

model Product {
  id            String  @id @default(cuid())
  name          String
  description   String  @db.Text
  images        String? @db.Text // JSON string of image paths
  price         Decimal @db.Decimal(10, 2)
  discountRate  Int     @default(0)
  discountPrice Decimal? @db.Decimal(10, 2)
  inStock       Boolean @default(true)
  category      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  orderItems OrderItem[]

  @@index([inStock])
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  totalAmount Decimal     @db.Decimal(10, 2)
  status      OrderStatus @default(PENDING)
  paymentKey  String?     // Toss Payments 결제 키
  paidAt      DateTime?   // 결제 완료 시간
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
  items  OrderItem[]

  @@index([userId])
  @@index([status])
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model HeroImage {
  id        String   @id @default(cuid())
  title     String?
  subtitle  String?
  imageUrl  String
  linkUrl   String?
  linkText  String?
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([order])
}

model Notice {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  important Boolean  @default(false)
  published Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([published, important])
  @@index([createdAt])
}

enum Role {
  USER
  ADMIN
}

enum ContentType {
  LIFESTYLE
  TREATMENT
  NOTICE
}

enum OrderStatus {
  PENDING
  PAID
  PREPARING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}